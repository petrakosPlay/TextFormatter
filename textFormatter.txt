- perform checks for maxword length and CHARS_PER_LINE
- break it down to functions or multiple c source files
- What happens if i have 2 words and i should put more than one space in between? When would this case occur?
- Fix the printing of the last space at the end of each line.
- Should MAX_WORDS be an input argument??
- When the random text fits in just one line should the line be padded with spaces to reach CHARS_PER_LINE
or simply be printed??

- What happens with the path to the 2 txts for input and output text when i install the app to another PC??
So far the path is pinned down in the code.



gdb32 --args ./textFormatter 103
gcc -Wall -g -o textFormatter textFormatter.c  
 gdb32 .\textFormatter

------------------------------------------------------------------------------------------------------------
A few words about how this tool works. A high level explanation of the algorithm.

In the beginning I just store each word in a buffer.
Then starting from the first word I start building lines adding words one by one until no more words can fit
in one line. For each combination of words that fit in a line I calculate the whitespace that has to be filled
in order to fully justify the line.
For instance, if I have a CHARS_PER_LINE = 10 and i have the follwing words "My name is Peter"
then the combination "My name" leaves 3 whitespaces to be filled in order to reach the total of 10 CHARS_PER_LINE.
the combination "My name is" leaves no whitespace to be filled since it is exactly 10 chars.
So I calculate the whitespace to be filled for each combination of words.
Then I change the starting word and do the same thing again for all possible/allowed combinations of words,
i.e. combinations of words that can fit in one line.
The results of this calculation are stored in a two dimension table where the row index, let it be I, is the
starting word and the column index, let it be J is the ending word. So table[I,J] is the whitespace to be filed
for a line that starts with word wordBuffer[I] and ends with word wordBuffer[J]

After this i start building all possible lines going from the last word of the paragraph to the first word.
Each time I store the best combination, i.e. the one with the lowest cost i.e. the lowest whitespace.
For the last line of eaach paragraph there is no cost, since I will not justify it.
But the words that the last line contains will dictate the possible combinations of words in the previous lines.
Essesntially as I go towards the first word of the paragraph I am buiding sentences/lines that have the lowest
aggragate cost, i.e. the cost of the current line plus the best possible cost of all the following lines, i.e.
the line that starts with the word that is just after the last word of the current line and the lines following
that line and so on.

The last part is to just print the text and add the needed padding/whitespace wherever needed.
At the end of the previous step I have a table that tells me where each next line should start, i.e. which is
the starting word of the next line. So I just have to print all the words in the current line and just add
some whitespace appropriately.



------------------------------------------------------------------------------------------------------------ 
//TODOs

- Remove types from variable names. ex. outputFilePtr to outputFile
- I remove the space at the end of each line but the code is lets say not so elegant. I think it may be better
if i change the code and do not store the space char after each word. Or maybe keep the current approach but
find a better way to write the fix.
- There is a known bug when the requested CPL (characters per line) is less than the length of the biggest
word in the text. I should exit the program if I encounter such a case.
- In terms of refactoring I could write a few functions in order to "package" some tasks in the code or even
to help make some conditions more readable. 

if (whitespace[indexOfFirstWordOfCurrentLine][indexOfLastWordOfCurrentLine] > 0 && currentLineWords > 1)	//if this line has more than one word and also needs padding with spaces
 
this condition could be written as 

if (line_requires_padding_with_spaces).

- Also I have a few things (TODOs) written inside the source code as well.

- I put a check to exit the program when a word is longer than the characters per line requested.
This was a quick fix. I can review it in the future.