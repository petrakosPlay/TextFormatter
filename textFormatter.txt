- perform checks for maxword length and CHARS_PER_LINE
- break it down to functions or multiple c source files
- What happens if i have 2 words and i should put more than one space in between? When would this case occur?
- Fix the printing of the last space at the end of each line.
- Should MAX_WORDS be an input argument??
- When the random text fits in just one line should the line be padded with spaces to reach CHARS_PER_LINE
or simply be printed??

- What happens with the path to the 2 txts for input and output text when i install the app to another PC??
So far the path is pinned down in the code.



gdb32 --args ./textFormatter 103
gcc -Wall -g -o textFormatter textFormatter.c  
 gdb32 .\textFormatter
 
------------------------------------------------------------------------------------------------------------ 
//TODOs

- Remove types from variable names. ex. outputFilePtr to outputFile
- I remove the space at the end of each line but the code is lets say not so elegant. I think it may be better
if i change the code and do not store the space char after each word. Or maybe keep the current approach but
find a better way to write the fix.
- There is a known bug when the requested CPL (characters per line) is less than the length of the biggest
word in the text. I should exit the program if I encounter such a case.
- In terms of refactoring I could write a few functions in order to "package" some tasks in the code or even
to help make some conditions more readable. 

if (whitespace[indexOfFirstWordOfCurrentLine][indexOfLastWordOfCurrentLine] > 0 && currentLineWords > 1)	//if this line has more than one word and also needs padding with spaces
 
this condition could be written as 

if (line_requires_padding_with_spaces).

- Also I have a few things (TODOs) written inside the source code as well.

- I put a check to exit the program when a word is longer than the characters per line requested.
This was a quick fix. I can review it in the future.